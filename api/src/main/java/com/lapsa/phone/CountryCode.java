package com.lapsa.phone;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public enum CountryCode {
    AC("247", "247"),
    AD("376", "376"),
    AE("971", "971"),
    AF("93", "93"),
    AG("1", "1268"),
    AI("1", "1264"),
    AL("355", "355"),
    AM("374", "374"),
    AN("599", "599"),
    AO("244", "244"),
    AQ("672", "672"),
    AR("54", "54"),
    AS("1", "1684"),
    AT("43", "43"),
    AU("61", "61"),
    AW("297", "297"),
    AZ("994", "994"),
    BA("387", "387"),
    BB("1", "1246"),
    BD("880", "880"),
    BE("32", "32"),
    BF("226", "226"),
    BG("359", "359"),
    BH("973", "973"),
    BI("257", "257"),
    BJ("229", "229"),
    BM("1", "1441"),
    BN("673", "673"),
    BO("591", "591"),
    BR("55", "55"),
    BS("1", "1242"),
    BT("975", "975"),
    BW("267", "267"),
    BY("375", "375"),
    BZ("501", "501"),
    CA("1", "1"),
    CD("243", "243"),
    CF("236", "236"),
    CG("242", "242"),
    CH("41", "41"),
    CI("225", "225"),
    CK("682", "682"),
    CL("56", "56"),
    CM("237", "237"),
    CN("86", "86"),
    CO("57", "57"),
    CR("506", "506"),
    CU("53", "53"),
    CV("238", "238"),
    CY("357", "357"),
    CZ("420", "420"),
    DE("49", "49"),
    DJ("253", "253"),
    DK("45", "45"),
    DM("1", "1767"),
    DO("1", "1809", "1829", "1849"),
    DZ("213", "213"),
    EC("593", "593"),
    EE("372", "372"),
    EG("20", "20"),
    ER("291", "291"),
    ES("34", "34"),
    ET("251", "251"),
    EU("388", "388"),
    FI("358", "358"),
    FJ("679", "679"),
    FK("500", "500"),
    FM("691", "691"),
    FO("298", "298"),
    FR("33", "33"),
    GA("241", "241"),
    GB("44", "44"),
    GD("1", "1473"),
    GE("995", "995"),
    GF("594", "594"),
    GH("233", "233"),
    GI("350", "350"),
    GL("299", "299"),
    GM("220", "220"),
    GN("224", "224"),
    GP("590", "590"),
    GQ("240", "240"),
    GR("30", "30"),
    GT("502", "502"),
    GU("1", "1671"),
    GW("245", "245"),
    GY("592", "592"),
    HK("852", "852"),
    HN("504", "504"),
    HR("385", "385"),
    HT("509", "509"),
    HU("36", "36"),
    ID("62", "62"),
    IE("353", "353"),
    IL("972", "972"),
    IN("91", "91"),
    IO("246", "246"),
    IQ("964", "964"),
    IR("98", "98"),
    IS("354", "354"),
    IT("39", "39"),
    JM("1", "1876"),
    JO("962", "962"),
    JP("81", "81"),
    KE("254", "254"),
    KG("996", "996"),
    KH("855", "855"),
    KI("686", "686"),
    KM("269", "269"),
    KN("1", "1869"),
    KP("850", "850"),
    KR("82", "82"),
    KW("965", "965"),
    KY("1", "1345"),
    KZ("7", "76", "77", "78"),
    LA("856", "856"),
    LB("961", "961"),
    LC("1", "1758"),
    LI("423", "423"),
    LK("94", "94"),
    LR("231", "231"),
    LS("266", "266"),
    LT("370", "370"),
    LU("352", "352"),
    LV("371", "371"),
    LY("218", "218"),
    MA("212", "212"),
    MC("377", "377"),
    MD("373", "373"),
    ME("382", "382"),
    MG("261", "261"),
    MH("692", "692"),
    MK("389", "389"),
    ML("223", "223"),
    MM("95", "95"),
    MN("976", "976"),
    MO("853", "853"),
    MP("1", "1670"),
    MQ("596", "596"),
    MR("222", "222"),
    MS("1", "1664"),
    MT("356", "356"),
    MU("230", "230"),
    MV("960", "960"),
    MW("265", "265"),
    MX("52", "52"),
    MY("60", "60"),
    MZ("258", "258"),
    NA("264", "264"),
    NC("687", "687"),
    NE("227", "227"),
    NF("672", "672"),
    NG("234", "234"),
    NI("505", "505"),
    NL("31", "31"),
    NO("47", "47"),
    NP("977", "977"),
    NR("674", "674"),
    NU("683", "683"),
    NZ("64", "64"),
    OM("968", "968"),
    PA("507", "507"),
    PE("51", "51"),
    PF("689", "689"),
    PG("675", "675"),
    PH("63", "63"),
    PK("92", "92"),
    PL("48", "48"),
    PM("508", "508"),
    PR("1", "1787", "1939"),
    PS("970", "970"),
    PT("351", "351"),
    PW("680", "680"),
    PY("595", "595"),
    QA("974", "974"),
    RE("262", "262"),
    RO("40", "40"),
    RS("381", "381"),
    RU("7", "73", "74", "75", "79"),
    RW("250", "250"),
    SA("966", "966"),
    SB("677", "677"),
    SC("248", "248"),
    SD("249", "249"),
    SE("46", "46"),
    SG("65", "65"),
    SH("290", "290"),
    SI("386", "386"),
    SK("421", "421"),
    SL("232", "232"),
    SM("378", "378"),
    SN("221", "221"),
    SO("252", "252"),
    SR("597", "597"),
    SS("211", "211"),
    ST("239", "239"),
    SV("503", "503"),
    SX("1", "1721"),
    SY("963", "963"),
    SZ("268", "268"),
    TC("1", "1649"),
    TD("235", "235"),
    TG("228", "228"),
    TH("66", "66"),
    TJ("992", "992"),
    TK("690", "690"),
    TL("670", "670"),
    TM("993", "993"),
    TN("216", "216"),
    TO("676", "676"),
    TR("90", "90"),
    TT("1", "1868"),
    TV("688", "688"),
    TW("886", "886"),
    TZ("255", "255"),
    UA("380", "380"),
    UG("256", "256"),
    US("1", "1"),
    UY("598", "598"),
    UZ("998", "998"),
    VA("379", "379"),
    VC("1", "1784"),
    VE("58", "58"),
    VG("1", "1284"),
    VI("1", "1340"),
    VN("84", "84"),
    VU("678", "678"),
    WF("681", "681"),
    WS("685", "685"),
    XC("808", "808"),
    XD("888", "888"),
    XF("800", "800"),
    XG("881", "881"),
    XK("383", "383"),
    XN("88", "882", "883"),
    XR("979", "979"),
    XS("870", "870"),
    XT("991", "991"),
    XU("878", "878"),
    YE("967", "967"),
    ZA("27", "27"),
    ZM("260", "260"),
    ZW("263", "263");

    private final String phoneCode;
    private final String[] phonePrefixes;

    CountryCode(String phoneCode, String... phonePrefixes) {
	this.phoneCode = phoneCode;
	this.phonePrefixes = phonePrefixes;
    }

    public String getPhoneCode() {
	return phoneCode;
    }

    @Override
    public String toString() {
	return "+" + phoneCode;
    }

    public static CountryCode getByPhonePrefix(String number) {
	if (number == null || number.isEmpty())
	    return null;
	for (String prefix : prefixesSortedList) {
	    if (number.startsWith(prefix))
		return prefixesMap.get(prefix);
	}
	return null;
    }

    private static List<String> prefixesSortedList;
    private static Map<String, CountryCode> prefixesMap;

    static {
	prefixesSortedList = new ArrayList<>();
	prefixesMap = new HashMap<>();
	for (CountryCode code : CountryCode.values()) {
	    for (String p : code.phonePrefixes) {
		prefixesSortedList.add(p);
		prefixesMap.put(p, code);
	    }
	}
	Collections.sort(prefixesSortedList, Collections.reverseOrder(new StringLengthComparator()));
    }

    public String[] prefixes() {
	return phonePrefixes;
    }
}
